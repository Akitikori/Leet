import java.util.ArrayList;
import java.util.List;
public class GenerateParentheses{
    private static List<String> finalList = new ArrayList<>();
    private static int N;
    private static List<String> solution(int n) {
        // we'll use recursion for this
        // the base case is when the length of the current string, called "current"
        // is equal to two times of n, where n is the number of parentheses
        // left is the number of left parenthesis
        // right is the number of right parenthesis
        // you can add a left parenthesis as long as the number of left parenthesis
        // is less than n
        // you can add a right parenthesis only if there are more right parenthesis
        // recurse...
        int left = 0;
        int right = 0;
        N = n;
        String word = "";
        backtrack(word, 0, 0);
        return finalList;
    }
     private static void backtrack(String word, int left, int right){
            if (word.length() == 2 * N){
                finalList.add(word);
                return;
            }
            if (left < N){
                backtrack(word + "(", left + 1, right);
            }
            if (right < left){
                backtrack(word + ")", left, right + 1);
            }
        }
        public static void main(String[] args){
            int n = Integer.parseInt(args[0]);
            System.out.println(solution(n));
        }
}